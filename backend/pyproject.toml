[project]
name = "rag-chatbot"
version = "2.0.0"
description = "경량 모듈형 한국어 RAG 챗봇 시스템 - Python FastAPI 구현"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "RAG Chatbot Team"},
]
keywords = ["rag", "chatbot", "korean", "ai", "fastapi"]

dependencies = [
    # FastAPI and ASGI Server
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "python-multipart>=0.0.6",
    
    # HTTP Client (requests 제거, httpx만 사용)
    "httpx>=0.25.2",
    
    # WebSocket Support
    "websockets>=12.0",
    
    # Database and Vector Store
    "qdrant-client>=1.6.9",
    
    # AI and ML Libraries
    "google-generativeai>=0.3.2",
    "anthropic>=0.7.8",
    "openai>=1.3.8",
    "cohere>=4.37",
    
    # Document Processing (PyPDF2 -> pypdf로 업그레이드)
    "pypdf>=3.17.0",
    "python-docx>=1.1.0",
    "openpyxl>=3.1.2",
    "pandas>=2.1.4",
    "beautifulsoup4>=4.12.2",
    "markdown>=3.5.1",
    
    # LangChain (최신 버전으로 업그레이드)
    "langchain>=0.1.9",
    "langchain-google-genai>=0.0.8",
    "langchain-openai>=0.0.5",
    "langchain-qdrant>=0.1.0",
    
    # FastEmbed for BM42 sparse vectors
    "fastembed>=0.3.0",
    
    # Text Processing
    "tiktoken>=0.5.2",
    
    # Configuration and Environment
    "pyyaml>=6.0.1",
    "python-dotenv>=1.0.0",
    
    # Session and Caching (redis는 선택적)
    # "redis>=5.0.1",  # 필요시 주석 해제
    
    # Validation and Serialization (pydantic은 FastAPI가 이미 포함)
    "pydantic-settings>=2.1.0",
    
    # Logging and Monitoring
    "structlog>=23.2.0",
    # "prometheus-client>=0.19.0",  # 모니터링 필요시 주석 해제
    
    # Security (불필요한 패키지 제거)
    # "bcrypt>=4.1.2",  # 인증 구현시 필요
    # "python-jose[cryptography]>=3.3.0",  # JWT 필요시
    
    # Rate Limiting
    "slowapi>=0.1.9",
    
    # System monitoring
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.12.0",
    "ruff>=0.1.9",
    "mypy>=1.8.0",
    "ipython>=8.19.0",
]

monitoring = [
    "prometheus-client>=0.19.0",
]

security = [
    "bcrypt>=4.1.2",
    "python-jose[cryptography]>=3.3.0",
]

redis = [
    "redis>=5.0.1",
]

[project.scripts]
rag-chatbot = "main:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
include = [
    "app/**/*.py",
    "main.py",
]

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.uv]
dev-dependencies = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-timeout>=2.3.1",
]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-ra -q --strict-markers --tb=short --timeout=30"
timeout = 30
timeout_method = "thread"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "basic: marks tests as basic functionality tests",
    "unit: marks tests as unit tests",
    "system: marks tests that require system Python environment",
]

# Test discovery patterns
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:pytest_asyncio.*",
]

# Asyncio configuration
asyncio_mode = "auto"

# Coverage settings for pytest-cov
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*", 
    "*/test_*.py",
    "*/.venv/*",
    "*/.venv_system/*",
    "*/venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "\\.\\.\\.",
]
show_missing = true
precision = 2

