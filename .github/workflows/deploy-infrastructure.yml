name: Deploy Dual-Lambda RAG Infrastructure

on:
  push:
    branches: [main, develop]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/deploy-infrastructure.yml'
  pull_request:
    branches: [main]
    paths:
      - 'infrastructure/**'

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.5.0
  NODE_VERSION: 18

jobs:
  validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Format Check
        run: |
          cd infrastructure/terraform
          terraform fmt -check -recursive

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init -backend=false

      - name: Terraform Validate
        run: |
          cd infrastructure/terraform
          terraform validate

      - name: Terraform Plan (Dry Run)
        if: github.event_name == 'pull_request'
        run: |
          cd infrastructure/terraform
          terraform init
          terraform plan \
            -var="qdrant_url=${{ secrets.QDRANT_URL }}" \
            -var="qdrant_api_key=${{ secrets.QDRANT_API_KEY }}" \
            -var="gemini_api_key=${{ secrets.GEMINI_API_KEY }}" \
            -var="claude_api_key=${{ secrets.CLAUDE_API_KEY }}" \
            -var="cohere_api_key=${{ secrets.COHERE_API_KEY }}" \
            -var="jina_api_key=${{ secrets.JINA_API_KEY }}" \
            -var="admin_email=${{ secrets.ADMIN_EMAIL }}" \
            -var="ses_from_email=${{ secrets.SES_FROM_EMAIL }}" \
            -var="environment=dev" \
            -out=tfplan

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            try {
              const plan = execSync('cd infrastructure/terraform && terraform show -no-color tfplan', { encoding: 'utf8' });
              const comment = `## Terraform Plan\n\`\`\`\n${plan}\n\`\`\``;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.error('Error creating comment:', error);
            }

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: |
          npm test
          npm run test:integration

      - name: Build Lambda functions
        run: |
          npm run build:lambda:prepare

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd infrastructure/terraform
          terraform plan \
            -var="qdrant_url=${{ secrets.QDRANT_URL }}" \
            -var="qdrant_api_key=${{ secrets.QDRANT_API_KEY }}" \
            -var="gemini_api_key=${{ secrets.GEMINI_API_KEY }}" \
            -var="claude_api_key=${{ secrets.CLAUDE_API_KEY }}" \
            -var="cohere_api_key=${{ secrets.COHERE_API_KEY }}" \
            -var="jina_api_key=${{ secrets.JINA_API_KEY }}" \
            -var="admin_email=${{ secrets.ADMIN_EMAIL }}" \
            -var="ses_from_email=${{ secrets.SES_FROM_EMAIL }}" \
            -var="environment=dev" \
            -out=tfplan

      - name: Terraform Apply
        run: |
          cd infrastructure/terraform
          terraform apply -auto-approve tfplan

      - name: Run data migration
        run: |
          export AWS_REGION=${{ env.AWS_REGION }}
          export PROJECT_NAME=dual-lambda-rag
          export ENVIRONMENT=dev
          node scripts/migrate-to-dynamodb.js

      - name: Run smoke tests
        run: |
          npm run test:smoke:dev

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: npm ci

      - name: Run comprehensive tests
        run: |
          npm test
          npm run test:integration
          npm run test:e2e

      - name: Build Lambda functions
        run: |
          npm run build:lambda:prepare

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd infrastructure/terraform
          terraform plan \
            -var="qdrant_url=${{ secrets.QDRANT_URL_PROD }}" \
            -var="qdrant_api_key=${{ secrets.QDRANT_API_KEY_PROD }}" \
            -var="gemini_api_key=${{ secrets.GEMINI_API_KEY_PROD }}" \
            -var="claude_api_key=${{ secrets.CLAUDE_API_KEY_PROD }}" \
            -var="cohere_api_key=${{ secrets.COHERE_API_KEY_PROD }}" \
            -var="jina_api_key=${{ secrets.JINA_API_KEY_PROD }}" \
            -var="admin_email=${{ secrets.ADMIN_EMAIL_PROD }}" \
            -var="ses_from_email=${{ secrets.SES_FROM_EMAIL_PROD }}" \
            -var="custom_domain=${{ secrets.CUSTOM_DOMAIN }}" \
            -var="environment=prod" \
            -out=tfplan

      - name: Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ secrets.PROD_APPROVERS }}
          minimum-approvals: 1
          issue-title: "Production Deployment Approval Required"
          issue-body: |
            Please review the Terraform plan and approve this production deployment.
            
            **Branch:** ${{ github.ref }}
            **Commit:** ${{ github.sha }}
            **Author:** ${{ github.actor }}

      - name: Terraform Apply
        run: |
          cd infrastructure/terraform
          terraform apply -auto-approve tfplan

      - name: Run production smoke tests
        run: |
          npm run test:smoke:prod

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "üöÄ Production deployment successful!"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "‚ùå Production deployment failed!"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  cleanup:
    name: Cleanup Development Environment
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' # Run on schedule only
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cleanup old development resources
        run: |
          cd infrastructure/terraform
          terraform init
          
          # Clean up resources older than 7 days
          aws lambda list-functions --query 'Functions[?LastModified<=`2023-01-01`]' --output table
          
          # Clean up old CloudWatch logs
          aws logs describe-log-groups --query 'logGroups[?creationTime<=`1672531200000`]' --output table